---
import Layout from '../../layouts/Layout.astro';
import { createServerClient } from '../../lib/supabase';

console.log('=== Iniciando proceso de callback ===');

const handleError = (error: string, description?: string) => {
  console.error('Error en callback:', { error, description });
  return Astro.redirect(`/signin?error=${encodeURIComponent(error)}&error_description=${encodeURIComponent(description || 'Error durante la autenticación')}`);
};

let response;
try {
  const requestUrl = new URL(Astro.request.url);
  console.log('URL recibida:', requestUrl.toString());
  
  // Extraer y loggear todos los parámetros
  const urlParams = Object.fromEntries(requestUrl.searchParams.entries());
  console.log('Parámetros de la URL:', urlParams);
  
  // Extraer parámetros
  const code = requestUrl.searchParams.get('code');
  const error = requestUrl.searchParams.get('error');
  const error_description = requestUrl.searchParams.get('error_description');

  // Obtener el code verifier de la cookie
  const code_verifier = Astro.cookies.get('code_verifier')?.value;
  console.log('Code verifier de cookie:', {
    exists: !!code_verifier,
    length: code_verifier?.length,
    value: code_verifier ? `${code_verifier.slice(0, 10)}...${code_verifier.slice(-10)}` : null
  });

  // Manejar errores de OAuth
  if (error) {
    console.error('Error OAuth:', { error, error_description });
    response = await handleError(error, error_description);
  } else if (!code || !code_verifier) {
    console.error('Faltan parámetros requeridos:', {
      code: code ? `${code.slice(0, 8)}...` : null,
      code_verifier: code_verifier ? `${code_verifier.slice(0, 8)}...` : null,
      code_exists: !!code,
      verifier_exists: !!code_verifier
    });
    response = await handleError(
      'invalid_request',
      'Faltan parámetros requeridos para la autenticación'
    );
  } else {
    try {
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      if (!supabaseUrl) {
        throw new Error('SUPABASE_URL no está definida');
      }

      // Intercambiar código por sesión usando fetch directamente
      console.log('Intercambiando código por sesión...', {
        code: code.slice(0, 8) + '...',
        code_verifier: code_verifier.slice(0, 8) + '...',
        code_length: code.length,
        verifier_length: code_verifier.length,
        verifier_valid: /^[A-Za-z0-9_-]{43,128}$/.test(code_verifier)
      });

      const exchangeResponse = await fetch(`${supabaseUrl}/auth/v1/token?grant_type=authorization_code`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': import.meta.env.PUBLIC_SUPABASE_ANON_KEY
        },
        body: JSON.stringify({
          auth_code: code,
          code_verifier: code_verifier
        })
      });

      const data = await exchangeResponse.json();

      if (!exchangeResponse.ok) {
        console.error('Error al intercambiar código por sesión:', {
          status: exchangeResponse.status,
          data
        });
        response = await handleError('auth_error', data.error_description || 'Error al intercambiar código por sesión');
      } else {
        console.log('✅ Sesión obtenida correctamente');

        // Crear cliente de Supabase y establecer la sesión
        const supabase = createServerClient();
        const { error: sessionError } = await supabase.auth.setSession({
          access_token: data.access_token,
          refresh_token: data.refresh_token
        });

        if (sessionError) {
          console.error('Error al establecer la sesión:', sessionError);
          response = await handleError('session_error', 'Error al establecer la sesión');
        } else {
          // Redirigir al dashboard después de una autenticación exitosa
          response = Astro.redirect('/dashboard');
        }
      }
    } catch (error) {
      console.error('Error inesperado durante el intercambio:', error);
      response = await handleError('unexpected_error', 'Error inesperado durante la autenticación');
    }
  }
} catch (error) {
  console.error('Error general en el callback:', error);
  response = await handleError('general_error', 'Error general durante la autenticación');
}

// Si no se ha establecido una respuesta, redirigir a signin con error
if (!response) {
  response = await handleError('unknown_error', 'Error desconocido durante la autenticación');
}
---

<Layout title="Autenticando...">
  <div class="flex min-h-screen items-center justify-center">
    <div class="text-center">
      <h1 class="text-xl font-semibold">Procesando autenticación...</h1>
      <p class="mt-2 text-gray-600">Por favor espere...</p>
    </div>
  </div>
</Layout>
